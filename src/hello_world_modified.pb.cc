// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/helloworld.proto

#include "protos/helloworld.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#include <chrono>
#include <iostream>
#include <fstream>

PROTOBUF_PRAGMA_INIT_SEG
namespace helloworld
{
    constexpr MessageInt::MessageInt(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
        : value_(0) {}
    struct MessageIntDefaultTypeInternal
    {
        constexpr MessageIntDefaultTypeInternal()
            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MessageIntDefaultTypeInternal() {}
        union
        {
            MessageInt _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageIntDefaultTypeInternal _MessageInt_default_instance_;
    constexpr MessageDouble::MessageDouble(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
        : value_(0) {}
    struct MessageDoubleDefaultTypeInternal
    {
        constexpr MessageDoubleDefaultTypeInternal()
            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MessageDoubleDefaultTypeInternal() {}
        union
        {
            MessageDouble _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDoubleDefaultTypeInternal _MessageDouble_default_instance_;
    constexpr MessageString::MessageString(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
        : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string) {}
    struct MessageStringDefaultTypeInternal
    {
        constexpr MessageStringDefaultTypeInternal()
            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MessageStringDefaultTypeInternal() {}
        union
        {
            MessageString _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageStringDefaultTypeInternal _MessageString_default_instance_;
    constexpr MessageComplex::MessageComplex(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
        : string1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), num2_(int64_t{0}), num3_(0), num1_(0) {}
    struct MessageComplexDefaultTypeInternal
    {
        constexpr MessageComplexDefaultTypeInternal()
            : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
        ~MessageComplexDefaultTypeInternal() {}
        union
        {
            MessageComplex _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageComplexDefaultTypeInternal _MessageComplex_default_instance_;
} // namespace helloworld
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fhelloworld_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_protos_2fhelloworld_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_protos_2fhelloworld_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fhelloworld_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageInt, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageInt, value_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageDouble, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageDouble, value_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageString, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageString, value_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageComplex, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageComplex, num1_),
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageComplex, num2_),
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageComplex, num3_),
    PROTOBUF_FIELD_OFFSET(::helloworld::MessageComplex, string1_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::helloworld::MessageInt)},
    {7, -1, -1, sizeof(::helloworld::MessageDouble)},
    {14, -1, -1, sizeof(::helloworld::MessageString)},
    {21, -1, -1, sizeof(::helloworld::MessageComplex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::helloworld::_MessageInt_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::helloworld::_MessageDouble_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::helloworld::_MessageString_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::helloworld::_MessageComplex_default_instance_),
};

const char descriptor_table_protodef_protos_2fhelloworld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\027protos/helloworld.proto\022\nhelloworld\"\033\n"
    "\nMessageInt\022\r\n\005value\030\001 \001(\005\"\036\n\rMessageDou"
    "ble\022\r\n\005value\030\001 \001(\001\"\036\n\rMessageString\022\r\n\005v"
    "alue\030\001 \001(\t\"K\n\016MessageComplex\022\014\n\004num1\030\001 \001"
    "(\005\022\014\n\004num2\030\002 \001(\003\022\014\n\004num3\030\003 \001(\001\022\017\n\007string"
    "1\030\004 \001(\t2\215\004\n\010BasicRPC\022\?\n\013SayHelloInt\022\026.he"
    "lloworld.MessageInt\032\026.helloworld.Message"
    "Int\"\000\022H\n\016SayHelloDouble\022\031.helloworld.Mes"
    "sageDouble\032\031.helloworld.MessageDouble\"\000\022"
    "H\n\016SayHelloString\022\031.helloworld.MessageSt"
    "ring\032\031.helloworld.MessageString\"\000\022G\n\017Say"
    "HelloComplex\022\032.helloworld.MessageComplex"
    "\032\026.helloworld.MessageInt\"\000\022K\n\025SayServerS"
    "treamingInt\022\026.helloworld.MessageInt\032\026.he"
    "lloworld.MessageInt\"\0000\001\022K\n\025SayClientStre"
    "amingInt\022\026.helloworld.MessageInt\032\026.hello"
    "world.MessageInt\"\000(\001\022I\n\021SayBiStreamingIn"
    "t\022\026.helloworld.MessageInt\032\026.helloworld.M"
    "essageInt\"\000(\0010\001b\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fhelloworld_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fhelloworld_2eproto = {
    false,
    false,
    743,
    descriptor_table_protodef_protos_2fhelloworld_2eproto,
    "protos/helloworld.proto",
    &descriptor_table_protos_2fhelloworld_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fhelloworld_2eproto::offsets,
    file_level_metadata_protos_2fhelloworld_2eproto,
    file_level_enum_descriptors_protos_2fhelloworld_2eproto,
    file_level_service_descriptors_protos_2fhelloworld_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *descriptor_table_protos_2fhelloworld_2eproto_getter()
{
    return &descriptor_table_protos_2fhelloworld_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fhelloworld_2eproto(&descriptor_table_protos_2fhelloworld_2eproto);
namespace helloworld
{

    // ===================================================================

    class MessageInt::_Internal
    {
    public:
    };

    MessageInt::MessageInt(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                           bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor();
        if (!is_message_owned)
        {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:helloworld.MessageInt)
    }
    MessageInt::MessageInt(const MessageInt &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        value_ = from.value_;
        // @@protoc_insertion_point(copy_constructor:helloworld.MessageInt)
    }

    void MessageInt::SharedCtor()
    {
        value_ = 0;
    }

    MessageInt::~MessageInt()
    {
        // @@protoc_insertion_point(destructor:helloworld.MessageInt)
        if (GetArenaForAllocation() != nullptr)
            return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MessageInt::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageInt::ArenaDtor(void *object)
    {
        MessageInt *_this = reinterpret_cast<MessageInt *>(object);
        (void)_this;
    }
    void MessageInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void MessageInt::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }

    void MessageInt::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:helloworld.MessageInt)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        value_ = 0;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *MessageInt::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        auto start = std::chrono::high_resolution_clock::now();
        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // int32 value = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
                {
                    value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
    {
        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_seconds = end - start;
        std::fstream outfile;
        outfile.open("int_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

        if (!outfile)
        {
            outfile.open("int_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
        }
        outfile << elapsed_seconds.count() << "\n";
        outfile.close();
        return ptr;
    }
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *MessageInt::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:helloworld.MessageInt)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 value = 1;
        if (this->_internal_value() != 0)
        {
            auto start = std::chrono::high_resolution_clock::now();

            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
            auto end = std::chrono::high_resolution_clock::now();
            std::chrono::duration<double> elapsed_seconds = end - start;
            // std::cout<<elapsed_seconds.count()<<"\n";
            std::fstream outfile;
            outfile.open("int_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

            if (!outfile)
            {
                outfile.open("int_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
            }
            outfile << elapsed_seconds.count() << "\n";
            outfile.close();
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:helloworld.MessageInt)
        return target;
    }

    size_t MessageInt::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:helloworld.MessageInt)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 value = 1;
        if (this->_internal_value() != 0)
        {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageInt::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        MessageInt::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *MessageInt::GetClassData() const { return &_class_data_; }

    void MessageInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                               const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        static_cast<MessageInt *>(to)->MergeFrom(
            static_cast<const MessageInt &>(from));
    }

    void MessageInt::MergeFrom(const MessageInt &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MessageInt)
        GOOGLE_DCHECK_NE(&from, this);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_value() != 0)
        {
            _internal_set_value(from._internal_value());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageInt::CopyFrom(const MessageInt &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MessageInt)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageInt::IsInitialized() const
    {
        return true;
    }

    void MessageInt::InternalSwap(MessageInt *other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(value_, other->value_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageInt::GetMetadata() const
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &descriptor_table_protos_2fhelloworld_2eproto_getter, &descriptor_table_protos_2fhelloworld_2eproto_once,
            file_level_metadata_protos_2fhelloworld_2eproto[0]);
    }

    // ===================================================================

    class MessageDouble::_Internal
    {
    public:
    };

    MessageDouble::MessageDouble(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor();
        if (!is_message_owned)
        {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:helloworld.MessageDouble)
    }
    MessageDouble::MessageDouble(const MessageDouble &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        value_ = from.value_;
        // @@protoc_insertion_point(copy_constructor:helloworld.MessageDouble)
    }

    void MessageDouble::SharedCtor()
    {
        value_ = 0;
    }

    MessageDouble::~MessageDouble()
    {
        // @@protoc_insertion_point(destructor:helloworld.MessageDouble)
        if (GetArenaForAllocation() != nullptr)
            return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MessageDouble::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageDouble::ArenaDtor(void *object)
    {
        MessageDouble *_this = reinterpret_cast<MessageDouble *>(object);
        (void)_this;
    }
    void MessageDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void MessageDouble::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }

    void MessageDouble::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:helloworld.MessageDouble)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        value_ = 0;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *MessageDouble::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        auto start = std::chrono::high_resolution_clock::now();

        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // double value = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9))
                {
                    value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                    ptr += sizeof(double);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
    {
        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_seconds = end - start;
        std::fstream outfile;
        outfile.open("double_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

        if (!outfile)
        {
            outfile.open("double_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
        }
        outfile << elapsed_seconds.count() << "\n";
        outfile.close();
        return ptr;
        return ptr;
    }
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *MessageDouble::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:helloworld.MessageDouble)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // double value = 1;
        if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0))
        {
            auto start = std::chrono::high_resolution_clock::now();

            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
            auto end = std::chrono::high_resolution_clock::now();
            std::chrono::duration<double> elapsed_seconds = end - start;
            // std::cout<<elapsed_seconds.count()<<"\n";
            std::fstream outfile;
            outfile.open("double_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

            if (!outfile)
            {
                outfile.open("double_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
            }
            outfile << elapsed_seconds.count() << "\n";
            outfile.close();
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:helloworld.MessageDouble)
        return target;
    }

    size_t MessageDouble::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:helloworld.MessageDouble)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // double value = 1;
        if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0))
        {
            total_size += 1 + 8;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageDouble::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        MessageDouble::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *MessageDouble::GetClassData() const { return &_class_data_; }

    void MessageDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                  const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        static_cast<MessageDouble *>(to)->MergeFrom(
            static_cast<const MessageDouble &>(from));
    }

    void MessageDouble::MergeFrom(const MessageDouble &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MessageDouble)
        GOOGLE_DCHECK_NE(&from, this);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (!(from._internal_value() <= 0 && from._internal_value() >= 0))
        {
            _internal_set_value(from._internal_value());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageDouble::CopyFrom(const MessageDouble &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MessageDouble)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageDouble::IsInitialized() const
    {
        return true;
    }

    void MessageDouble::InternalSwap(MessageDouble *other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(value_, other->value_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageDouble::GetMetadata() const
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &descriptor_table_protos_2fhelloworld_2eproto_getter, &descriptor_table_protos_2fhelloworld_2eproto_once,
            file_level_metadata_protos_2fhelloworld_2eproto[1]);
    }

    // ===================================================================

    class MessageString::_Internal
    {
    public:
    };

    MessageString::MessageString(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor();
        if (!is_message_owned)
        {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:helloworld.MessageString)
    }
    MessageString::MessageString(const MessageString &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_value().empty())
        {
            value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(),
                       GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:helloworld.MessageString)
    }

    void MessageString::SharedCtor()
    {
        value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    MessageString::~MessageString()
    {
        // @@protoc_insertion_point(destructor:helloworld.MessageString)
        if (GetArenaForAllocation() != nullptr)
            return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MessageString::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void MessageString::ArenaDtor(void *object)
    {
        MessageString *_this = reinterpret_cast<MessageString *>(object);
        (void)_this;
    }
    void MessageString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void MessageString::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }

    void MessageString::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:helloworld.MessageString)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        value_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *MessageString::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        auto start = std::chrono::high_resolution_clock::now();

        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // string value = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
                {
                    auto str = _internal_mutable_value();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helloworld.MessageString.value"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
    {
        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_seconds = end - start;
        std::fstream outfile;
        outfile.open("string_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

        if (!outfile)
        {
            outfile.open("string_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
        }
        outfile << elapsed_seconds.count() << "\n";
        outfile.close();
        return ptr;
        return ptr;
    }
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *MessageString::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:helloworld.MessageString)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // string value = 1;
        if (!this->_internal_value().empty())
        {
            auto start = std::chrono::high_resolution_clock::now();

            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "helloworld.MessageString.value");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_value(), target);
            auto end = std::chrono::high_resolution_clock::now();
            std::chrono::duration<double> elapsed_seconds = end - start;
            std::fstream outfile;
            outfile.open("string_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

            if (!outfile)
            {
                outfile.open("string_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
            }
            outfile << elapsed_seconds.count() << "\n";
            outfile.close();
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:helloworld.MessageString)
        return target;
    }

    size_t MessageString::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:helloworld.MessageString)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string value = 1;
        if (!this->_internal_value().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_value());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageString::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        MessageString::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *MessageString::GetClassData() const { return &_class_data_; }

    void MessageString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                  const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        static_cast<MessageString *>(to)->MergeFrom(
            static_cast<const MessageString &>(from));
    }

    void MessageString::MergeFrom(const MessageString &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MessageString)
        GOOGLE_DCHECK_NE(&from, this);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_value().empty())
        {
            _internal_set_value(from._internal_value());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageString::CopyFrom(const MessageString &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MessageString)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageString::IsInitialized() const
    {
        return true;
    }

    void MessageString::InternalSwap(MessageString *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            &value_, lhs_arena,
            &other->value_, rhs_arena);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageString::GetMetadata() const
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &descriptor_table_protos_2fhelloworld_2eproto_getter, &descriptor_table_protos_2fhelloworld_2eproto_once,
            file_level_metadata_protos_2fhelloworld_2eproto[2]);
    }

    // ===================================================================

    class MessageComplex::_Internal
    {
    public:
    };

    MessageComplex::MessageComplex(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                   bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor();
        if (!is_message_owned)
        {
            RegisterArenaDtor(arena);
        }
        // @@protoc_insertion_point(arena_constructor:helloworld.MessageComplex)
    }
    MessageComplex::MessageComplex(const MessageComplex &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        string1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_string1().empty())
        {
            string1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string1(),
                         GetArenaForAllocation());
        }
        ::memcpy(&num2_, &from.num2_,
                 static_cast<size_t>(reinterpret_cast<char *>(&num1_) -
                                     reinterpret_cast<char *>(&num2_)) +
                     sizeof(num1_));
        // @@protoc_insertion_point(copy_constructor:helloworld.MessageComplex)
    }

    void MessageComplex::SharedCtor()
    {
        string1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                                                      reinterpret_cast<char *>(&num2_) - reinterpret_cast<char *>(this)),
                 0, static_cast<size_t>(reinterpret_cast<char *>(&num1_) - reinterpret_cast<char *>(&num2_)) + sizeof(num1_));
    }

    MessageComplex::~MessageComplex()
    {
        // @@protoc_insertion_point(destructor:helloworld.MessageComplex)
        if (GetArenaForAllocation() != nullptr)
            return;
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    inline void MessageComplex::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        string1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void MessageComplex::ArenaDtor(void *object)
    {
        MessageComplex *_this = reinterpret_cast<MessageComplex *>(object);
        (void)_this;
    }
    void MessageComplex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void MessageComplex::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }

    void MessageComplex::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:helloworld.MessageComplex)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        string1_.ClearToEmpty();
        ::memset(&num2_, 0, static_cast<size_t>(reinterpret_cast<char *>(&num1_) - reinterpret_cast<char *>(&num2_)) + sizeof(num1_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *MessageComplex::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        auto start = std::chrono::high_resolution_clock::now();

        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // int32 num1 = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
                {
                    num1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // int64 num2 = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
                {
                    num2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
                // double num3 = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25))
                {
                    num3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                    ptr += sizeof(double);
                }
                else
                    goto handle_unusual;
                continue;
                // string string1 = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34))
                {
                    auto str = _internal_mutable_string1();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helloworld.MessageComplex.string1"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
    {
        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_seconds = end - start;
        std::fstream outfile;
        outfile.open("complex_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

        if (!outfile)
        {
            outfile.open("complex_unmarshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
        }
        outfile << elapsed_seconds.count() << "\n";
        outfile.close();
        return ptr;
        return ptr;
    }
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *MessageComplex::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:helloworld.MessageComplex)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        auto start = std::chrono::high_resolution_clock::now();

        // int32 num1 = 1;
        if (this->_internal_num1() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num1(), target);
        }

        // int64 num2 = 2;
        if (this->_internal_num2() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num2(), target);
        }

        // double num3 = 3;
        if (!(this->_internal_num3() <= 0 && this->_internal_num3() >= 0))
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_num3(), target);
        }

        // string string1 = 4;
        if (!this->_internal_string1().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_string1().data(), static_cast<int>(this->_internal_string1().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "helloworld.MessageComplex.string1");
            target = stream->WriteStringMaybeAliased(
                4, this->_internal_string1(), target);
        }

        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed_seconds = end - start;
        std::fstream outfile;
        outfile.open("complex_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::app);

        if (!outfile)
        {
            outfile.open("complex_marshalling.txt", std::fstream::in | std::fstream::out | std::fstream::trunc);
        }
        outfile << elapsed_seconds.count() << "\n";
        outfile.close();

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:helloworld.MessageComplex)
        return target;
    }

    size_t MessageComplex::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:helloworld.MessageComplex)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string string1 = 4;
        if (!this->_internal_string1().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_string1());
        }

        // int64 num2 = 2;
        if (this->_internal_num2() != 0)
        {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num2());
        }

        // double num3 = 3;
        if (!(this->_internal_num3() <= 0 && this->_internal_num3() >= 0))
        {
            total_size += 1 + 8;
        }

        // int32 num1 = 1;
        if (this->_internal_num1() != 0)
        {
            total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num1());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageComplex::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        MessageComplex::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *MessageComplex::GetClassData() const { return &_class_data_; }

    void MessageComplex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                   const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        static_cast<MessageComplex *>(to)->MergeFrom(
            static_cast<const MessageComplex &>(from));
    }

    void MessageComplex::MergeFrom(const MessageComplex &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MessageComplex)
        GOOGLE_DCHECK_NE(&from, this);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_string1().empty())
        {
            _internal_set_string1(from._internal_string1());
        }
        if (from._internal_num2() != 0)
        {
            _internal_set_num2(from._internal_num2());
        }
        if (!(from._internal_num3() <= 0 && from._internal_num3() >= 0))
        {
            _internal_set_num3(from._internal_num3());
        }
        if (from._internal_num1() != 0)
        {
            _internal_set_num1(from._internal_num1());
        }
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageComplex::CopyFrom(const MessageComplex &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MessageComplex)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageComplex::IsInitialized() const
    {
        return true;
    }

    void MessageComplex::InternalSwap(MessageComplex *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            &string1_, lhs_arena,
            &other->string1_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageComplex, num1_) + sizeof(MessageComplex::num1_) - PROTOBUF_FIELD_OFFSET(MessageComplex, num2_)>(
            reinterpret_cast<char *>(&num2_),
            reinterpret_cast<char *>(&other->num2_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageComplex::GetMetadata() const
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &descriptor_table_protos_2fhelloworld_2eproto_getter, &descriptor_table_protos_2fhelloworld_2eproto_once,
            file_level_metadata_protos_2fhelloworld_2eproto[3]);
    }

    // @@protoc_insertion_point(namespace_scope)
} // namespace helloworld
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::helloworld::MessageInt *Arena::CreateMaybeMessage<::helloworld::MessageInt>(Arena *arena)
{
    return Arena::CreateMessageInternal<::helloworld::MessageInt>(arena);
}
template <>
PROTOBUF_NOINLINE ::helloworld::MessageDouble *Arena::CreateMaybeMessage<::helloworld::MessageDouble>(Arena *arena)
{
    return Arena::CreateMessageInternal<::helloworld::MessageDouble>(arena);
}
template <>
PROTOBUF_NOINLINE ::helloworld::MessageString *Arena::CreateMaybeMessage<::helloworld::MessageString>(Arena *arena)
{
    return Arena::CreateMessageInternal<::helloworld::MessageString>(arena);
}
template <>
PROTOBUF_NOINLINE ::helloworld::MessageComplex *Arena::CreateMaybeMessage<::helloworld::MessageComplex>(Arena *arena)
{
    return Arena::CreateMessageInternal<::helloworld::MessageComplex>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
